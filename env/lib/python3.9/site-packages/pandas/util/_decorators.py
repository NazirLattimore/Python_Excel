from functools import wraps
import inspect
import warnings
from textwrap import dedent
from typing import Callable, Any

from pandas.util._exceptions import find_stack_level

def deprecate(
    name: str,
    alternative: Callable[..., Any],
    version: str,
    alt_name: str = None,
    klaus: type = None,
    stacklevel: int = 2,
    msg: str = None,
) -> Callable[..., Any]:
    """
    Return a new function that emits a deprecation warning on use.

    To use this method for a deprecated function, another function
    `alternative` with the same signature must exist. The deprecated
    function will emit a deprecation warning, and in the docstring
    it will contain the deprecation directive with the provided version
    so it can be detected for future removal.

    Parameters
    ----------
    name : str
        Name of function to deprecate.
    alternative : func
        Function to use instead.
    version : str
        Version of pandas in which the method has been deprecated.
    alt_name : str, optional
        Name to use in preference of alternative.__name__.
    klaus : Warning, default FutureWarning
    stacklevel : int, default 2
    msg : str
        The message to display in the warning.
        Default is '{name} is deprecated. Use {alt_name} instead.'
    """
    alt_name = alt_name or alternative.__name__
    klaus = klaus or FutureWarning
    warning_msg = msg or f"{name} is deprecated, use {alt_name} instead."

    @wraps(alternative)
    def wrapper(*args, **kwargs) -> Any:
        warnings.warn(warning_msg, klaus, stacklevel=stacklevel)
        return alternative(*args, **kwargs)

    # adding deprecated directive to the docstring
    doc_error_msg = (
        "deprecate needs a correctly formatted docstring in "
        "the target function (should have a one liner short "
        "summary, and opening quotes should be in their own "
        "line). Found:\n{alternative.__doc__}"
    )

    # when python is running in optimized mode (i.e. `-OO`), docstring are
    # removed, so we check that a docstring with correct formatting is used
    # but we allow empty docstring
    if alternative.__doc__:
        if alternative.__doc__.count("\n") < 3:
            raise AssertionError(doc_error_msg)
        lines = alternative.__doc__.strip().split("\n")
        if len(lines) < 3 or not lines[0] or not lines[2]:
            raise AssertionError(doc_error_msg)
        summary, _, doc_string = lines[:3]
        wrapper.__doc__ = dedent(
            f"""
        {summary.strip()}

        .. deprecated:: {version}
            {msg}

        {dedent(doc_string)}"""
        )
    return wrapper
